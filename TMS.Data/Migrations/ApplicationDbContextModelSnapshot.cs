// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TMS.Data;

namespace TMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.Request_seq", "'Request_seq', '', '1000', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("Relational:Sequence:.Transaction_Seq", "'Transaction_Seq', '', '1000', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TMS.Data.Entities.AccountCommission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<int>("CommissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CommissionID");

                    b.HasIndex("DenominationID");

                    b.ToTable("AccountCommissions");
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int>("FeesID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID");

                    b.HasIndex("FeesID");

                    b.ToTable("AccountFees");
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTransactionCommission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TransactionID");

                    b.ToTable("AccountTransactionCommissions");
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTypeProfileCommission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeProfileDenominationID")
                        .HasColumnType("int");

                    b.Property<int>("CommissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AccountTypeProfileDenominationID");

                    b.HasIndex("CommissionID");

                    b.ToTable("AccountTypeProfileCommissions");
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTypeProfileDenomination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeProfileID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID", "AccountTypeProfileID")
                        .IsUnique();

                    b.ToTable("AccountTypeProfileDenominations");
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTypeProfileFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeProfileDenominationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeesID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AccountTypeProfileDenominationID");

                    b.HasIndex("FeesID");

                    b.ToTable("AccountTypeProfileFees");
                });

            modelBuilder.Entity("TMS.Data.Entities.BillPaymentMode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("BillPaymentModes");
                });

            modelBuilder.Entity("TMS.Data.Entities.CardType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CardTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.Commission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFrom")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("AmountTo")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int>("CommissionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentModeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ID");

                    b.HasIndex("CommissionTypeID");

                    b.HasIndex("PaymentModeID");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("TMS.Data.Entities.CommissionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("CommissionTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("TMS.Data.Entities.Denomination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("APIValue")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("BillPaymentModeID")
                        .HasColumnType("int");

                    b.Property<short>("ClassType")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<bool>("Inquirable")
                        .HasColumnType("bit");

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldDenominationID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentModeID")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("ID");

                    b.HasIndex("BillPaymentModeID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("PaymentModeID");

                    b.HasIndex("ServiceCategoryID");

                    b.HasIndex("ServiceID");

                    b.ToTable("Denominations");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationCommission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CommissionID");

                    b.HasIndex("DenominationID");

                    b.ToTable("DenominationCommissions");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int>("EntityID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID");

                    b.ToTable("DenominationEntities");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationFee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int>("FeesID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID");

                    b.HasIndex("FeesID");

                    b.ToTable("DenominationFees");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationParam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ParamKey")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ValueModeID")
                        .HasColumnType("int");

                    b.Property<int>("ValueTypeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ValueModeID");

                    b.HasIndex("ValueTypeID");

                    b.ToTable("DenominationParams");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationParamValueMode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("DenominationParamValueModes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 386, DateTimeKind.Local).AddTicks(6116),
                            Name = "FIXED"
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 387, DateTimeKind.Local).AddTicks(8592),
                            Name = "DYNAMIC"
                        });
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationParamValueType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("DenominationParamValueTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 389, DateTimeKind.Local).AddTicks(6126),
                            Name = "Number"
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 389, DateTimeKind.Local).AddTicks(6145),
                            Name = "String"
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 389, DateTimeKind.Local).AddTicks(6146),
                            Name = "List"
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 389, DateTimeKind.Local).AddTicks(6148),
                            Name = "Date"
                        });
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationParameter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int>("DenominationParamID")
                        .HasColumnType("int");

                    b.Property<bool>("Optional")
                        .HasColumnType("bit");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValidationExpression")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("ValidationMessage")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ValueList")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("ID");

                    b.HasIndex("DenominationID");

                    b.HasIndex("DenominationParamID");

                    b.ToTable("DenominationParameters");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationProviderConfiguration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("DenominationProviderID");

                    b.ToTable("DenominationProviderConfigerations");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationReceiptData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<string>("Disclaimer")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID")
                        .IsUnique();

                    b.ToTable("DenominationReceiptData");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationReceiptParam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Alignment")
                        .HasColumnType("int");

                    b.Property<bool>("Bold")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int>("ParameterID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID");

                    b.HasIndex("ParameterID");

                    b.ToTable("DenominationReceiptParams");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationServiceProvider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int?>("OldServiceID")
                        .HasColumnType("int");

                    b.Property<decimal>("ProviderAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("ProviderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProviderHasFees")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceProviderID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID");

                    b.HasIndex("ServiceProviderID");

                    b.ToTable("DenominationServiceProviders");
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationTax", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int>("TaxID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationID");

                    b.HasIndex("TaxID");

                    b.ToTable("DenominationTaxes");
                });

            modelBuilder.Entity("TMS.Data.Entities.Fee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFrom")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("AmountTo")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeesTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentModeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("ID");

                    b.HasIndex("FeesTypeID");

                    b.HasIndex("PaymentModeID");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("TMS.Data.Entities.FeesType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("FeesTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.FieldType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ValExp")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("ID");

                    b.ToTable("FieldTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.InquiryBill", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderServiceResponseID")
                        .HasColumnType("int");

                    b.Property<int>("Sequence")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ProviderServiceResponseID");

                    b.ToTable("InquiryBills");
                });

            modelBuilder.Entity("TMS.Data.Entities.InquiryBillDetails", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InquiryBillID")
                        .HasColumnType("int");

                    b.Property<int>("ParameterID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("InquiryBillID");

                    b.HasIndex("ParameterID");

                    b.ToTable("InquiryBillDetails");
                });

            modelBuilder.Entity("TMS.Data.Entities.Log", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("LogTypeID")
                        .HasColumnType("smallint");

                    b.Property<int>("ProviderServiceRequestID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("TMS.Data.Entities.MainStatusCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArMessage")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("MainStatusCodes");
                });

            modelBuilder.Entity("TMS.Data.Entities.Parameter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("TMS.Data.Entities.PaymentMode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("PaymentModes");
                });

            modelBuilder.Entity("TMS.Data.Entities.PendingPaymentCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Brn")
                        .HasColumnType("int");

                    b.Property<int>("CardTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HostTransactionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentRefInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PengingPaymentCardStatusID")
                        .HasColumnType("int");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CardTypeID");

                    b.HasIndex("PengingPaymentCardStatusID");

                    b.HasIndex("TransactionID");

                    b.ToTable("PendingPaymentCards");
                });

            modelBuilder.Entity("TMS.Data.Entities.PendingPaymentCardStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("PendingPaymentCardStatuses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 409, DateTimeKind.Local).AddTicks(9961),
                            Name = "Initiated",
                            NameAr = "بدأت"
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 410, DateTimeKind.Local).AddTicks(41),
                            Name = "Canceled",
                            NameAr = "ألغيت"
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 410, DateTimeKind.Local).AddTicks(43),
                            Name = "Confirmed",
                            NameAr = "مؤكد"
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(2022, 2, 1, 15, 27, 21, 410, DateTimeKind.Local).AddTicks(45),
                            Name = "AutoCanceled",
                            NameAr = "مُلغى تلقائيًا"
                        });
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceConfigeration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationServiceProviderID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceConfigerationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DenominationServiceProviderID")
                        .IsUnique();

                    b.HasIndex("ServiceConfigerationID");

                    b.ToTable("ProviderServiceConfigerations");
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Brn")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DenominationID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderServiceRequestStatusID")
                        .HasColumnType("int");

                    b.Property<int>("RequestTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ProviderServiceRequestStatusID");

                    b.HasIndex("RequestTypeID");

                    b.ToTable("ProviderServiceRequests");
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceRequestParam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParameterID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderServiceRequestID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ParameterID");

                    b.HasIndex("ProviderServiceRequestID");

                    b.ToTable("ProviderServiceRequestParams");
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceRequestStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ProviderServiceRequestStatus");
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProviderServiceRequestID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,3)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ProviderServiceRequestID");

                    b.ToTable("ProviderServiceResponses");
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceResponseParam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParameterID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderServiceResponseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ParameterID");

                    b.HasIndex("ProviderServiceResponseID");

                    b.ToTable("ProviderServiceResponseParams");
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderStatusCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProviderMessage")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("ServiceProviderID")
                        .HasColumnType("int");

                    b.Property<string>("StatusCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("StatusCodeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ServiceProviderID");

                    b.HasIndex("StatusCodeID");

                    b.ToTable("ProviderStatusCodes");
                });

            modelBuilder.Entity("TMS.Data.Entities.ReceiptBodyParam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParameterID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderServiceRequestID")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ParameterID");

                    b.HasIndex("ProviderServiceRequestID");

                    b.HasIndex("TransactionID");

                    b.ToTable("ReceiptBodyParams");
                });

            modelBuilder.Entity("TMS.Data.Entities.Request", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("BillingAccount")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ChannelID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProviderServiceRequestID")
                        .HasColumnType("int");

                    b.Property<string>("RRN")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceDenominationID")
                        .HasColumnType("int");

                    b.Property<int?>("StatusID")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionID")
                        .HasColumnType("int");

                    b.Property<string>("UUID")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ServiceDenominationID");

                    b.HasIndex("StatusID");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("TMS.Data.Entities.RequestStatus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ResponseCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("RequestStatus");
                });

            modelBuilder.Entity("TMS.Data.Entities.RequestType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("RequestTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.Restaurant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RestaurantCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RestaurantNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("TMS.Data.Entities.Service", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ClassType")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceEntityID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ServiceEntityID");

                    b.HasIndex("ServiceTypeID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceBalanceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BalanceTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceBalanceTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LastNode")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceIndex")
                        .HasColumnType("int");

                    b.Property<int>("ServiceLevel")
                        .HasColumnType("int");

                    b.Property<string>("ServiceSubCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceConfigParms", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceConfigerationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ServiceConfigerationID");

                    b.ToTable("ServiceConfigParms");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceConfigeration", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeOut")
                        .HasColumnType("int");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ServiceConfigerations");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ServiceEntities");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceProvider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.ServicesField", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Display")
                        .HasColumnType("bit");

                    b.Property<string>("EnglishFieldName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("FieldTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Printed")
                        .HasColumnType("bit");

                    b.Property<bool>("Req")
                        .HasColumnType("bit");

                    b.Property<int>("ServId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("fRank")
                        .HasColumnType("int");

                    b.Property<int>("printed_rank")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("FieldTypeID");

                    b.ToTable("ServicesFields");
                });

            modelBuilder.Entity("TMS.Data.Entities.StatusCode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArMessage")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MainStatusCodeID")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("RequestStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("MainStatusCodeID");

                    b.HasIndex("RequestStatusID");

                    b.ToTable("StatusCodes");
                });

            modelBuilder.Entity("TMS.Data.Entities.Tax", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFrom")
                        .HasColumnType("decimal(18,3)");

                    b.Property<decimal>("AmountTo")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentModeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("TaxTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,3)");

                    b.HasKey("ID");

                    b.HasIndex("PaymentModeID");

                    b.HasIndex("TaxTypeID");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("TMS.Data.Entities.TaxType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("TaxTypes");
                });

            modelBuilder.Entity("TMS.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountIDFrom")
                        .HasColumnType("int");

                    b.Property<int?>("AccountIDTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<bool>("IsReversed")
                        .HasColumnType("bit");

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("OriginalTrx")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestID")
                        .HasColumnType("int");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<string>("TransactionID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("RequestID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("TMS.Data.Entities.TransactionReceipt", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Receipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransactionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("TransactionID");

                    b.ToTable("TransactionReceipts");
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountCommission", b =>
                {
                    b.HasOne("TMS.Data.Entities.Commission", "Commission")
                        .WithMany("AccountCommissions")
                        .HasForeignKey("CommissionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("AccountCommissions")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountFee", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("AccountFees")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Fee", "Fee")
                        .WithMany("AccountFees")
                        .HasForeignKey("FeesID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTransactionCommission", b =>
                {
                    b.HasOne("TMS.Data.Entities.Transaction", "Transaction")
                        .WithMany("AccountTransactionCommissions")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTypeProfileCommission", b =>
                {
                    b.HasOne("TMS.Data.Entities.AccountTypeProfileDenomination", "AccountTypeProfileDenomination")
                        .WithMany("AccountTypeProfileCommissions")
                        .HasForeignKey("AccountTypeProfileDenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Commission", "Commission")
                        .WithMany("AccountTypeProfileCommissions")
                        .HasForeignKey("CommissionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTypeProfileDenomination", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("AccountTypeProfileDenominations")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.AccountTypeProfileFee", b =>
                {
                    b.HasOne("TMS.Data.Entities.AccountTypeProfileDenomination", "AccountTypeProfileDenomination")
                        .WithMany("AccountTypeProfileFees")
                        .HasForeignKey("AccountTypeProfileDenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Fee", "Fee")
                        .WithMany("AccountTypeProfileFees")
                        .HasForeignKey("FeesID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.Commission", b =>
                {
                    b.HasOne("TMS.Data.Entities.CommissionType", "CommissionType")
                        .WithMany("Commissions")
                        .HasForeignKey("CommissionTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.PaymentMode", "PaymentMode")
                        .WithMany("Commissions")
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.Denomination", b =>
                {
                    b.HasOne("TMS.Data.Entities.BillPaymentMode", "BillPaymentMode")
                        .WithMany("Denominations")
                        .HasForeignKey("BillPaymentModeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TMS.Data.Entities.Currency", "Currency")
                        .WithMany("Denominations")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TMS.Data.Entities.PaymentMode", "PaymentMode")
                        .WithMany("Denominations")
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TMS.Data.Entities.ServiceCategory", "ServiceCategory")
                        .WithMany("Denominations")
                        .HasForeignKey("ServiceCategoryID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TMS.Data.Entities.Service", "Service")
                        .WithMany("Denominations")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationCommission", b =>
                {
                    b.HasOne("TMS.Data.Entities.Commission", "Commission")
                        .WithMany("DenominationCommissions")
                        .HasForeignKey("CommissionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("DenominationCommissions")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationEntity", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("DenominationEntities")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationFee", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("DenominationFees")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Fee", "Fee")
                        .WithMany("DenominationFees")
                        .HasForeignKey("FeesID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationParam", b =>
                {
                    b.HasOne("TMS.Data.Entities.DenominationParamValueMode", "DenominationParamValueMode")
                        .WithMany("DenominationParams")
                        .HasForeignKey("ValueModeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.DenominationParamValueType", "DenominationParamValueType")
                        .WithMany("DenominationParams")
                        .HasForeignKey("ValueTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationParameter", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("DenominationParameters")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.DenominationParam", "DenominationParam")
                        .WithMany("DenominationParameters")
                        .HasForeignKey("DenominationParamID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationProviderConfiguration", b =>
                {
                    b.HasOne("TMS.Data.Entities.DenominationServiceProvider", "DenominationServiceProvider")
                        .WithMany("DenominationProviderConfigerations")
                        .HasForeignKey("DenominationProviderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationReceiptData", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithOne("DenominationReceiptData")
                        .HasForeignKey("TMS.Data.Entities.DenominationReceiptData", "DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationReceiptParam", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("DenominationReceiptParams")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Parameter", "Parameter")
                        .WithMany("DenominationReceiptParams")
                        .HasForeignKey("ParameterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationServiceProvider", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("DenominationServiceProviders")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("DenominationServiceProviders")
                        .HasForeignKey("ServiceProviderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.DenominationTax", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("DenominationTaxes")
                        .HasForeignKey("DenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Tax", "Tax")
                        .WithMany("DenominationTax")
                        .HasForeignKey("TaxID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.Fee", b =>
                {
                    b.HasOne("TMS.Data.Entities.FeesType", "FeesType")
                        .WithMany("Fees")
                        .HasForeignKey("FeesTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.PaymentMode", "PaymentMode")
                        .WithMany("Fees")
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.InquiryBill", b =>
                {
                    b.HasOne("TMS.Data.Entities.ProviderServiceResponse", "ProviderServiceResponse")
                        .WithMany("InquiryBills")
                        .HasForeignKey("ProviderServiceResponseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.InquiryBillDetails", b =>
                {
                    b.HasOne("TMS.Data.Entities.InquiryBill", "InquiryBill")
                        .WithMany("InquiryBillDetails")
                        .HasForeignKey("InquiryBillID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Parameter", "Parameter")
                        .WithMany("InquiryBillDetails")
                        .HasForeignKey("ParameterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.PendingPaymentCard", b =>
                {
                    b.HasOne("TMS.Data.Entities.CardType", "CardType")
                        .WithMany("PendingPaymentCards")
                        .HasForeignKey("CardTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.PendingPaymentCardStatus", "PendingPaymentCardStatus")
                        .WithMany("PendingPaymentCards")
                        .HasForeignKey("PengingPaymentCardStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Transaction", "Transaction")
                        .WithMany("PendingPaymentCards")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceConfigeration", b =>
                {
                    b.HasOne("TMS.Data.Entities.DenominationServiceProvider", "DenominationServiceProvider")
                        .WithOne("ProviderServiceConfigerations")
                        .HasForeignKey("TMS.Data.Entities.ProviderServiceConfigeration", "DenominationServiceProviderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.ServiceConfigeration", "ServiceConfigeration")
                        .WithMany("ProviderServiceConfigerations")
                        .HasForeignKey("ServiceConfigerationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceRequest", b =>
                {
                    b.HasOne("TMS.Data.Entities.ProviderServiceRequestStatus", "ProviderServiceRequestStatus")
                        .WithMany("ProviderServiceRequests")
                        .HasForeignKey("ProviderServiceRequestStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.RequestType", "RequestType")
                        .WithMany("ProviderServiceRequests")
                        .HasForeignKey("RequestTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceRequestParam", b =>
                {
                    b.HasOne("TMS.Data.Entities.Parameter", "Parameter")
                        .WithMany("ProviderServiceRequestParams")
                        .HasForeignKey("ParameterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.ProviderServiceRequest", "ProviderServiceRequest")
                        .WithMany()
                        .HasForeignKey("ProviderServiceRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceResponse", b =>
                {
                    b.HasOne("TMS.Data.Entities.ProviderServiceRequest", "ProviderServiceRequest")
                        .WithMany("ProviderServiceResponses")
                        .HasForeignKey("ProviderServiceRequestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderServiceResponseParam", b =>
                {
                    b.HasOne("TMS.Data.Entities.Parameter", "Parameter")
                        .WithMany("ProviderServiceResponseParams")
                        .HasForeignKey("ParameterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.ProviderServiceResponse", "ProviderServiceResponse")
                        .WithMany("ProviderServiceResponseParams")
                        .HasForeignKey("ProviderServiceResponseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ProviderStatusCode", b =>
                {
                    b.HasOne("TMS.Data.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("ProviderStatusCodes")
                        .HasForeignKey("ServiceProviderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.StatusCode", "StatusCodeModel")
                        .WithMany("ProviderStatusCodes")
                        .HasForeignKey("StatusCodeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ReceiptBodyParam", b =>
                {
                    b.HasOne("TMS.Data.Entities.Parameter", "Parameter")
                        .WithMany("ReceiptBodyParams")
                        .HasForeignKey("ParameterID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.ProviderServiceRequest", "ProviderServiceRequest")
                        .WithMany("ReceiptBodyParams")
                        .HasForeignKey("ProviderServiceRequestID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.Transaction", "Transaction")
                        .WithMany("ReceiptBodyParams")
                        .HasForeignKey("TransactionID");
                });

            modelBuilder.Entity("TMS.Data.Entities.Request", b =>
                {
                    b.HasOne("TMS.Data.Entities.Denomination", "Denomination")
                        .WithMany("Requests")
                        .HasForeignKey("ServiceDenominationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.RequestStatus", "RequestStatus")
                        .WithMany("Requests")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("TMS.Data.Entities.Service", b =>
                {
                    b.HasOne("TMS.Data.Entities.ServiceEntity", "ServiceEntity")
                        .WithMany("Services")
                        .HasForeignKey("ServiceEntityID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceBalanceType", b =>
                {
                    b.HasOne("TMS.Data.Entities.Service", "Service")
                        .WithMany("ServiceBalanceTypes")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceCategory", b =>
                {
                    b.HasOne("TMS.Data.Entities.ServiceCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("TMS.Data.Entities.ServiceConfigParms", b =>
                {
                    b.HasOne("TMS.Data.Entities.ServiceConfigeration", "ServiceConfigeration")
                        .WithMany("ServiceConfigParms")
                        .HasForeignKey("ServiceConfigerationID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.ServicesField", b =>
                {
                    b.HasOne("TMS.Data.Entities.FieldType", "FieldType")
                        .WithMany("ServicesFields")
                        .HasForeignKey("FieldTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.StatusCode", b =>
                {
                    b.HasOne("TMS.Data.Entities.MainStatusCode", "MainStatusCode")
                        .WithMany("StatusCodes")
                        .HasForeignKey("MainStatusCodeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.RequestStatus", "RequestStatus")
                        .WithMany("StatusCodes")
                        .HasForeignKey("RequestStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.Tax", b =>
                {
                    b.HasOne("TMS.Data.Entities.PaymentMode", "PaymentMode")
                        .WithMany("Taxes")
                        .HasForeignKey("PaymentModeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TMS.Data.Entities.TaxType", "TaxType")
                        .WithMany("Taxes")
                        .HasForeignKey("TaxTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TMS.Data.Entities.Transaction", b =>
                {
                    b.HasOne("TMS.Data.Entities.Request", "Request")
                        .WithMany("Transactions")
                        .HasForeignKey("RequestID");
                });

            modelBuilder.Entity("TMS.Data.Entities.TransactionReceipt", b =>
                {
                    b.HasOne("TMS.Data.Entities.Transaction", "Transaction")
                        .WithMany("TransactionReceipts")
                        .HasForeignKey("TransactionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = TMS.Services.Client.SwaggerDateConverter;

namespace TMS.Services.Models.SwaggerModels
{
    /// <summary>
    /// CreateAccountModel
    /// </summary>
    [DataContract]
        public partial class CreateAccountModel :  IEquatable<CreateAccountModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAccountModel" /> class.
        /// </summary>
        /// <param name="accountId">accountId.</param>
        /// <param name="amount">amount.</param>
        /// <param name="balanceTypeIds">balanceTypeIds.</param>
        public CreateAccountModel(int? accountId = default(int?), double? amount = default(double?), List<int?> balanceTypeIds = default(List<int?>))
        {
            this.AccountId = accountId;
            this.Amount = amount;
            this.BalanceTypeIds = balanceTypeIds;
        }
        
        /// <summary>
        /// Gets or Sets AccountId
        /// </summary>
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public int? AccountId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets BalanceTypeIds
        /// </summary>
        [DataMember(Name="balanceTypeIds", EmitDefaultValue=false)]
        public List<int?> BalanceTypeIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateAccountModel {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  BalanceTypeIds: ").Append(BalanceTypeIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAccountModel);
        }

        /// <summary>
        /// Returns true if CreateAccountModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAccountModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAccountModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.BalanceTypeIds == input.BalanceTypeIds ||
                    this.BalanceTypeIds != null &&
                    input.BalanceTypeIds != null &&
                    this.BalanceTypeIds.SequenceEqual(input.BalanceTypeIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                    hashCode = hashCode * 59 + this.AccountId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.BalanceTypeIds != null)
                    hashCode = hashCode * 59 + this.BalanceTypeIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
